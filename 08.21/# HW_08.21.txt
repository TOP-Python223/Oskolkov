Модули. Импорт

  ==========  1  ==========
  
Во вспомогательном файле с именем 1_2.py напишите функцию important_message(), которая принимает строку с текстом и печатает в терминале сообщение, обрамлённое рамкой в ширину консоли и такой высоты, чтобы между текстом и рамкой с каждой стороны оставалось по одной пустой строке

Для того, чтобы узнать ширину окна консоли, используйте функцию из модуля shutil:

    https://docs.python.org/3/library/shutil.html#shutil.get_terminal_size

В основном файле 1.py напишите условно-бесконечный цикл приёма команд от пользователя. 

По вводу команды msg с последующим аргументом в виде строки вызовите функцию important_message() из файла 1_2.py

По команде quit осуществите выход из цикла.

Пример ввода:
    msg Now you're looking at the very important message from the team of the developers of this miraculous script
    
Пример вывода:
    
    #==============================================================================#
    #                                                                              #
    #  Now you're looking at the very important message from the team of the deve  #
    #  lopers of this miraculous script                                            #
    #                                                                              #
    #==============================================================================#



  ==========  2  ==========
  
Иногда, приложение не может обнаружить свои файлы в каталогах по-умолчанию. В таких случаях приложение запрашивает у пользователя путь, по которому можно найти потерянный файл.
Нам необходимо написать код, который обеспечивает именно такую функциональность.

Для этого мы создадим три файла в двух разных каталогах: 
	\folder1\2.py, в нём находится точка входа в нашу программу (этот файл мы передаём интерпретатору)
	\folder1\2_1.py, здесь находится функция return_file()
	\folder2\2_2.py, этот файл находится в другой папке и содержит один вызов функции print(“2_2.py: Я нашёлся!”)

В файле с именем 2_1.py напишите функцию return_file(), которая в качестве аргумента принимает путь к искомому файлу 2_2.py и копирует этот файл в каталог с файлом 2.py

В основном файле сначала получаем путь, по которому размещён файл 2_2.py
Необходимо, чтобы пользователь вводил полный путь, включая имя файла. 
Затем, вызываем функцию return_file(), передавая ей в качестве аргумента полученный от пользователя ввод. 
После успешного копирования, выполняем инструкцию import для возвращённого файла 2_2.py.

Для работы с путями используйте функцию Path() из модуля pathlib. Передайте функции строку, содержащую путь, и сохраните объект, который функция возвращает – его можно использовать в качестве аргумента для большинства других функций, которые работают с путями.

    https://docs.python.org/3/library/pathlib.html#basic-use

При прописывании путей ОС Windows в коде в виде строк используйте двойной обратный слэш '\\'.

Для копирования файла, воспользуйтесь функцией copy() из модуля shutil. Функция принимает два аргумента: путь к файлу, который подлежит копированию, и путь к папке, в которую необходимо скопировать файл.

    https://docs.python.org/3/library/shutil.html#shutil.copy



  =========================

Код каждой решённой задачи помещается в текущий каталог репозитория в виде отдельного файла с именем, соответствующем номеру задачи.

Функции обязательно документируются.
Параметры функций обязательно аннотируются.

Все файлы выполняются с помощью интерпретатора.
Текстовый вывод в стандартный поток stdout копируется.
Копия вывода в виде комментария помещается в конец файла с кодом задачи.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Проверяйте обновления в своём репозитории каждый день.