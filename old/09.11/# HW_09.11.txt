Проект 1: основной код, часть 1

  ==========  1  ==========

Дорабатывать и дополнять управляющий код, руководствуясь разделом Этапы работы приложения в документе Архитектура и кодом в примере проекта.

Первым делом доработайте обработку команды для начала новой партии.

Дополнение управляющего кода осуществляется с помощью добавления кода обработки новых команд. 

Примечание 1: варианты ввода команд добавляйте в специальный словарь (по умолчанию находится в модуле help.py) — по образцу в примере проекта.

Примечание 2: помните, что в управляющий код и в целом в модуль верхнего уровня мы помещаем только вызовы функций и логику, связанную с основными этапами работы приложения. Весь прочий код должен находиться в дополнительных модулях, импортируемых в модуль верхнего уровня.



  ==========  2  ==========

В документе Архитектура и модулях примера проекта изучить добавленные сигнатуры функций с псевдокодом, поясняющим логику работы данных функций.

Эти функции представляют из себя базовое представление того, как можно фрагментировать основной код приложения.

За исключением особо оговорённых случаев (как, например, в следующей задаче) вы не обязаны следовать представленной логике фрагментирования кода.
Однако, крайне важно, при реализации собственных вариантов функций, писать комментарии к каждой из них. В этих комментариях должна содержаться аргументация того, почему вы предпочитаете этот вариант представленному.



  ==========  3  ==========

В файл game.py добавить код обработки игрового процесса.

Вы можете аргументировать и использовать фрагментацию кода на любое количество функций. 
Но не менее четырёх функций обязаны присутствовать в вашем коде:
  - функция формирования строки с псевдографическим изображением игрового поля: draw_field()
  - функция проверки на существование победной комбинации или ничьей: is_win_or_tie()
  - функция запроса хода игрока (человека): human_turn()
  - управляющая функция обработки игрового процесса: game()

Не забывайте тестировать свой код.



  ==========  4  ==========

По аналогии с написанной функцией read_ini() в модуле config.py примера проекта написать функцию save_ini() для сохранения данных из глобальных переменных в .ini файлы.

Используйте файлы данных для работы с тестовыми данными.



  =========================

Все задания по проекту выполняются в локальном репозитории проекта и загружаются в свой удалённый репозиторий проекта.

В текущий репозиторий помещается TXT файл со ссылкой на репозиторий проекта.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий проекта.

Функции обязательно документируются.
Параметры функций обязательно аннотируются.

Преподаватель пишет комментарии и правки в коде проекта и обновляет файлы в удалённом репозитории.
Проверяйте обновления в своём репозитории каждый день.