Текстовый ввод/вывод. Работа с путями: модуль pathlib

  ==========  1  ==========

Напишите свою функцию, которая читает .csv файл в словарь по столбцам.

Функция принимает два аргумента:
    имя файла: str
    разделитель: str
        ',' по умолчанию
        ';'
        '\t'

Значения первой строки файла становятся ключами словаря, значения из следующих строк становятся элементами списка – значения в словаре.

Пример, test.csv:
    col1,col2,col3
    1,10,100
    2,20,200
    3,30,300

Пример вывода:
    >>> csv_dict('test.csv', ',')
    {'col1': [1, 2, 3], 'col2': [10, 20, 30], 'col3': [100, 200, 300]}



  ==========  2  ==========

Есть файл с ключевыми словами: keywords.txt (рядом с файлом задания)
Есть каталог с различными файлами, включая .txt: TestFolder (распакуйте в каталог архив TestFolder.rar)

Необходимо сохранить те строки из текстовых файлов, в которых найдены ключевые слова (любое из). Допускать совпадения словоформ: например, "аккордов" считается совпадением для ключевого слова "аккорд".

Реализовать возможность сохранить контекст – n строк перед и n строк после строки, содержащей ключевое слово.

Формат сохранения:
    {
        'filename': str     # имя файла
        'line_number': int  # номер строки с ключевым словом
        'keyword': str      # ключевое слово
        'context': int      # количество строк до/после ключевой (по умолчанию 0)
        'text': str         # найденная строка – строки, если поиск включал контекст
    }

После обработки всех файлов у вас должен быть список словарей с найденными фрагментами.
Выведите его в JSON файл, который загрузите вместе с кодом в качестве ответа.

Используйте функцию dump() из пакета json:

    https://docs.python.org/3/library/json.html#json.dump
    
    эта функция принимает структуру данных (в этой задаче – ваш список словарей) и файлоподобный объект, который вы получаете как обычно — используя функцию open() в режиме 'w'

Самостоятельно продумайте структуру кода: какие и сколько должно быть функций, их аргументы и возвращаемые значения.



  ==========  3  ==========

Используя средства из модуля pathlib написать функцию, которая возвращает кортеж имён файлов (не каталогов) в каталоге по переданному в stdin пути.

Пример (windows cmd):
    D:\TestFolder> dir /b
    Folder1
    Folder2
    file1.txt
    file2.csv
    file3.zip
    
    D:\TestFolder> py 3.py
    path: D:\TestFolder
    ('file1.txt', 'file2.csv', 'file3.zip')



  ==========  4  ==========

Необходимо перебрать файлы в каталоге по переданному пути и вывести список файлов, которые старше семи дней

Напишите функцию, которая первым позиционно-ключевым аргументом принимает путь к каталогу, вторым ключевым аргументом принимает количество дней со значением по-умолчанию 7

Функция должна возвращать список (list) путей (объектов Path) к файлам

Основная программа должна принимать от пользователя путь к нужному каталогу и вызывать вышеописанную функцию, передавая ей введённый путь

В качестве проверка работоспособности скрипта введите в программу путь к каталогу с сохранёнными нашими скриптами с примерами

Используйте модуль pathlib:

    # абсолютный или относительный путь к нужному каталогу
    path = ""
    # итерация по файлам и каталогам в текущем каталоге
    for file in Path(path).glob('*'):
        # возвращает дату и время последнего доступа к файлу в POSIX формате
        file.stat().st_atime
    
    https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob
    https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_file
    https://docs.python.org/3/library/pathlib.html#pathlib.Path.stat
    https://docs.python.org/3/library/os.html#os.stat_result.st_mtime

Используйте тип datetime из модуля datetime:

    Для работы с POSIX форматом даты/времени в типе datetime используются методы timestamp
    
    https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp
    
    Тип datetime поддерживает арифметические операции с датами и временем – в результате таких операций получается тип timedelta
    
    https://docs.python.org/3/library/datetime.html#datetime.timedelta



  =========================

Код каждой решённой задачи помещается в текущий каталог репозитория в виде отдельного файла с именем, соответствующем номеру задачи.

Функции обязательно документируются.
Параметры функций обязательно аннотируются.

Все файлы выполняются с помощью интерпретатора.
Текстовый вывод в стандартный поток stdout копируется.
Копия вывода в виде комментария помещается в конец файла с кодом задачи.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Проверяйте обновления в своём репозитории каждый день.