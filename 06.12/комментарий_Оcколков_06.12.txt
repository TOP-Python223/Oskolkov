  =====================  легенда  ====================

Верно      — всё хорошо и комментариев не требует
Замечания  — в целом верно, но можно лучше / комментарии
Ошибки     — что-то либо всё пошло не так
Неверно    — условие задачи неверно интерпретировано
Нет ответа — файл с решением задачи отсутствует



  =====================  задачи  =====================

1.1. Верно

1.2. Верно

1.3. Верно

1.4. Верно

2.1. Верно

2.2. Верно

2.3. Верно

2.4. Ошибки: 
        а) рассмотрены не все случаи: проверьте сумму чисел 1, 0 и 0
     Замечания: 
        а) подумайте, как ещё можно решить эту задачу, кроме как перебирать все комбинации?

2.5. Замечания: 
        a) имена переменных должны быть значащими: например, здесь вместо a1 и a2 подошли бы c1_v и c1_h (в шахматах буква обозначает вертикаль, а цифра обозначает горизонталь)
        б) ещё один способ решения можно увидеть, если вспомнить, что:
            – каждому символу в кодировочной таблице сопоставлено число, 
            – в Python мы получаем код символа с помощью функции ord():
            – сумма чётного количества нечётных чисел всегда чётная
        
            c1_v = ord(input('Вертикаль первой клетки: '))
            c1_h = int(input('Горизонталь первой клетки: '))
            c2_v = ord(input('\nВертикаль второй клетки: '))
            c2_h = int(input('Горизонталь второй клетки: '))
            if (c1_v + c1_h + c2_v + c2_h) % 2:
                print('Нет')
            else:
                print('Да')

        в) на будущее: в тех редких случаях, когда невозможно избежать подобных сложносочинённых условий, их всё же стоит оформить в более читаемом виде:
        
            is_c1_let_odd = c1_let in ('a', 'c', 'e', 'g')
            is_c1_dig_odd = c1_dig in (1, 3, 5, 7)
            is_c1_let_even = not is_c1_let_odd
            is_c1_dig_even = not is_c1_dig_odd
            
            is_c2_let_odd = c2_let in ('a', 'c', 'e', 'g')
            is_c2_dig_odd = c2_dig in (1, 3, 5, 7)
            is_c2_let_even = not is_c2_let_odd
            is_c2_dig_even = not is_c2_dig_odd
            
            is_c1_black = is_c1_let_odd and is_c1_dig_odd or is_c1_let_even and is_c1_dig_even
            is_c2_black = is_c2_let_odd and is_c2_dig_odd or is_c2_let_even and is_c2_let_even
            
            is_c1_white = is_c1_let_odd and is_c1_dig_even or is_c1_let_even and is_c1_dig_odd
            is_c2_white = is_c2_let_odd and is_c2_dig_even or is_c2_let_even and is_c2_dig_odd
            
            if is_c1_black and is_c2_black or is_c1_white and is_c2_white:
                print('Да')
            else:
                print('Нет')

3.1. Замечания: 
        a) приоритет логических операторов, включая or, ниже, чем у операторов сравнения — скобки не нужны

3.2. Верно

3.3. Замечания: 
        a) старайтесь избегать дублирования кода; здесь нам ничего не стоит скомбинировать условия, поэтому вместо лишнего блока elif:
        
            if a1 == b1 or a2 == b2:
                print('Да')
            else:
                print('Нет')

3.4. Замечания: 
        a) имена переменных должны быть значащими
        б) есть лучшие способы решения, попробуйте найти их самостоятельно по аналогии с задачей 2.5;
           подсказка: модуль числа



  ==================  рекомендации  ==================

Руководство по оформлению кода Python:
    (eng) https://peps.python.org/pep-0008/
    (rus) https://pythonpip.ru/osnovy/pep-8-v-python-pravila-dlya-idealnogo-koda